// Code generated by entc, DO NOT EDIT.

package user

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldFirstname holds the string denoting the firstname field in the database.
	FieldFirstname = "firstname"
	// FieldLastname holds the string denoting the lastname field in the database.
	FieldLastname = "lastname"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldBirthDay holds the string denoting the birthday field in the database.
	FieldBirthDay = "birth_day"
	// EdgeReviews holds the string denoting the reviews edge name in mutations.
	EdgeReviews = "reviews"
	// Table holds the table name of the user in the database.
	Table = "users"
	// ReviewsTable is the table that holds the reviews relation/edge. The primary key declared below.
	ReviewsTable = "user_reviews"
	// ReviewsInverseTable is the table name for the Review entity.
	// It exists in this package in order to avoid circular dependency with the "review" package.
	ReviewsInverseTable = "reviews"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldFirstname,
	FieldLastname,
	FieldDescription,
	FieldPassword,
	FieldEmail,
	FieldBirthDay,
}

var (
	// ReviewsPrimaryKey and ReviewsColumn2 are the table columns denoting the
	// primary key for the reviews relation (M2M).
	ReviewsPrimaryKey = []string{"user_id", "review_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}
