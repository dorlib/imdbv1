// Code generated by entc, DO NOT EDIT.

package ent

import (
	"IMDB/ent/director"
	"IMDB/ent/movie"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Movie is the model entity for the Movie schema.
type Movie struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Rank holds the value of the "rank" field.
	Rank int `json:"rank,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MovieQuery when eager-loading is set.
	Edges           MovieEdges `json:"edges"`
	director_movies *int
}

// MovieEdges holds the relations/edges for other nodes in the graph.
type MovieEdges struct {
	// Director holds the value of the director edge.
	Director *Director `json:"director,omitempty"`
	// Review holds the value of the review edge.
	Review []*Review `json:"review,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// DirectorOrErr returns the Director value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MovieEdges) DirectorOrErr() (*Director, error) {
	if e.loadedTypes[0] {
		if e.Director == nil {
			// The edge director was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: director.Label}
		}
		return e.Director, nil
	}
	return nil, &NotLoadedError{edge: "director"}
}

// ReviewOrErr returns the Review value or an error if the edge
// was not loaded in eager-loading.
func (e MovieEdges) ReviewOrErr() ([]*Review, error) {
	if e.loadedTypes[1] {
		return e.Review, nil
	}
	return nil, &NotLoadedError{edge: "review"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Movie) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case movie.FieldID, movie.FieldRank:
			values[i] = new(sql.NullInt64)
		case movie.FieldName, movie.FieldDescription:
			values[i] = new(sql.NullString)
		case movie.ForeignKeys[0]: // director_movies
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Movie", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Movie fields.
func (m *Movie) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case movie.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			m.ID = int(value.Int64)
		case movie.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				m.Name = value.String
			}
		case movie.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				m.Description = value.String
			}
		case movie.FieldRank:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field rank", values[i])
			} else if value.Valid {
				m.Rank = int(value.Int64)
			}
		case movie.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field director_movies", value)
			} else if value.Valid {
				m.director_movies = new(int)
				*m.director_movies = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryDirector queries the "director" edge of the Movie entity.
func (m *Movie) QueryDirector() *DirectorQuery {
	return (&MovieClient{config: m.config}).QueryDirector(m)
}

// QueryReview queries the "review" edge of the Movie entity.
func (m *Movie) QueryReview() *ReviewQuery {
	return (&MovieClient{config: m.config}).QueryReview(m)
}

// Update returns a builder for updating this Movie.
// Note that you need to call Movie.Unwrap() before calling this method if this Movie
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Movie) Update() *MovieUpdateOne {
	return (&MovieClient{config: m.config}).UpdateOne(m)
}

// Unwrap unwraps the Movie entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Movie) Unwrap() *Movie {
	tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Movie is not a transactional entity")
	}
	m.config.driver = tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Movie) String() string {
	var builder strings.Builder
	builder.WriteString("Movie(")
	builder.WriteString(fmt.Sprintf("id=%v", m.ID))
	builder.WriteString(", name=")
	builder.WriteString(m.Name)
	builder.WriteString(", description=")
	builder.WriteString(m.Description)
	builder.WriteString(", rank=")
	builder.WriteString(fmt.Sprintf("%v", m.Rank))
	builder.WriteByte(')')
	return builder.String()
}

// Movies is a parsable slice of Movie.
type Movies []*Movie

func (m Movies) config(cfg config) {
	for _i := range m {
		m[_i].config = cfg
	}
}
