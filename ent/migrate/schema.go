// Code generated by entc, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// DirectorsColumns holds the columns for the "directors" table.
	DirectorsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString, Unique: true},
	}
	// DirectorsTable holds the schema information for the "directors" table.
	DirectorsTable = &schema.Table{
		Name:       "directors",
		Columns:    DirectorsColumns,
		PrimaryKey: []*schema.Column{DirectorsColumns[0]},
	}
	// MoviesColumns holds the columns for the "movies" table.
	MoviesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString},
		{Name: "rank", Type: field.TypeInt},
		{Name: "director_movies", Type: field.TypeInt, Nullable: true},
	}
	// MoviesTable holds the schema information for the "movies" table.
	MoviesTable = &schema.Table{
		Name:       "movies",
		Columns:    MoviesColumns,
		PrimaryKey: []*schema.Column{MoviesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "movies_directors_movies",
				Columns:    []*schema.Column{MoviesColumns[4]},
				RefColumns: []*schema.Column{DirectorsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// ReviewsColumns holds the columns for the "reviews" table.
	ReviewsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "text", Type: field.TypeString},
		{Name: "rank", Type: field.TypeFloat32},
		{Name: "user_user", Type: field.TypeInt, Nullable: true},
	}
	// ReviewsTable holds the schema information for the "reviews" table.
	ReviewsTable = &schema.Table{
		Name:       "reviews",
		Columns:    ReviewsColumns,
		PrimaryKey: []*schema.Column{ReviewsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "reviews_users_user",
				Columns:    []*schema.Column{ReviewsColumns[3]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// ReviewMoviesColumns holds the columns for the "review_movies" table.
	ReviewMoviesColumns = []*schema.Column{
		{Name: "review_id", Type: field.TypeInt},
		{Name: "movie_id", Type: field.TypeInt},
	}
	// ReviewMoviesTable holds the schema information for the "review_movies" table.
	ReviewMoviesTable = &schema.Table{
		Name:       "review_movies",
		Columns:    ReviewMoviesColumns,
		PrimaryKey: []*schema.Column{ReviewMoviesColumns[0], ReviewMoviesColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "review_movies_review_id",
				Columns:    []*schema.Column{ReviewMoviesColumns[0]},
				RefColumns: []*schema.Column{ReviewsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "review_movies_movie_id",
				Columns:    []*schema.Column{ReviewMoviesColumns[1]},
				RefColumns: []*schema.Column{MoviesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// ReviewUserColumns holds the columns for the "review_user" table.
	ReviewUserColumns = []*schema.Column{
		{Name: "review_id", Type: field.TypeInt},
		{Name: "user_id", Type: field.TypeInt},
	}
	// ReviewUserTable holds the schema information for the "review_user" table.
	ReviewUserTable = &schema.Table{
		Name:       "review_user",
		Columns:    ReviewUserColumns,
		PrimaryKey: []*schema.Column{ReviewUserColumns[0], ReviewUserColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "review_user_review_id",
				Columns:    []*schema.Column{ReviewUserColumns[0]},
				RefColumns: []*schema.Column{ReviewsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "review_user_user_id",
				Columns:    []*schema.Column{ReviewUserColumns[1]},
				RefColumns: []*schema.Column{ReviewsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		DirectorsTable,
		MoviesTable,
		ReviewsTable,
		UsersTable,
		ReviewMoviesTable,
		ReviewUserTable,
	}
)

func init() {
	MoviesTable.ForeignKeys[0].RefTable = DirectorsTable
	ReviewsTable.ForeignKeys[0].RefTable = UsersTable
	ReviewMoviesTable.ForeignKeys[0].RefTable = ReviewsTable
	ReviewMoviesTable.ForeignKeys[1].RefTable = MoviesTable
	ReviewUserTable.ForeignKeys[0].RefTable = ReviewsTable
	ReviewUserTable.ForeignKeys[1].RefTable = ReviewsTable
}
