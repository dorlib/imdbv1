// Code generated by entc, DO NOT EDIT.

package review

const (
	// Label holds the string label denoting the review type in the database.
	Label = "review"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldText holds the string denoting the text field in the database.
	FieldText = "text"
	// FieldRank holds the string denoting the rank field in the database.
	FieldRank = "rank"
	// EdgeMovies holds the string denoting the movies edge name in mutations.
	EdgeMovies = "movies"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the review in the database.
	Table = "reviews"
	// MoviesTable is the table that holds the movies relation/edge. The primary key declared below.
	MoviesTable = "review_movies"
	// MoviesInverseTable is the table name for the Movie entity.
	// It exists in this package in order to avoid circular dependency with the "movie" package.
	MoviesInverseTable = "movies"
	// UserTable is the table that holds the user relation/edge. The primary key declared below.
	UserTable = "review_user"
)

// Columns holds all SQL columns for review fields.
var Columns = []string{
	FieldID,
	FieldText,
	FieldRank,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "reviews"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_user",
}

var (
	// MoviesPrimaryKey and MoviesColumn2 are the table columns denoting the
	// primary key for the movies relation (M2M).
	MoviesPrimaryKey = []string{"review_id", "movie_id"}
	// UserPrimaryKey and UserColumn2 are the table columns denoting the
	// primary key for the user relation (M2M).
	UserPrimaryKey = []string{"review_id", "user_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}
